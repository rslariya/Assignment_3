#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100


char stack[MAX_SIZE];
int top = -1;


int isEmpty() {
    return top == -1;
}


void push(char c) {
    if (top < MAX_SIZE - 1) {
        top++;
        stack[top] = c;
    }
}


char pop() {
    if (!isEmpty()) {
        char c = stack[top];
        top--;
        return c;
    }
    return '\0';
}


char peek() {
    if (!isEmpty()) {
        return stack[top];
    }
    return '\0';
}


int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}


int precedence(char op) {
    switch(op) {
        case '^':
            return 3;
        case '*':
        case '/':
            return 2;
        case '+':
        case '-':
            return 1;
        default:
            return 0;
    }
}


void infixToPostfix(char infix[], char postfix[]) {
    int i = 0, j = 0;
    char c;
    
    while (infix[i] != '\0') {
        c = infix[i];
        
       
        if (isalnum(c)) {
            postfix[j++] = c;
        }
        // If '(', push to stack
        else if (c == '(') {
            push(c);
        }
       
        else if (c == ')') {
            while (!isEmpty() && peek() != '(') {
                postfix[j++] = pop();
            }
            if (!isEmpty() && peek() == '(') {
                pop(); // Remove '(' from stack
            }
        }
       
        else if (isOperator(c)) {
            while (!isEmpty() && precedence(peek()) >= precedence(c)) {
                postfix[j++] = pop();
            }
            push(c);
        }
        
        i++;
    }
    
    
    while (!isEmpty()) {
        postfix[j++] = pop();
    }
    
    postfix[j] = '\0'; // Null-terminate the postfix string
}

int main() {
    char infix[MAX_SIZE], postfix[MAX_SIZE];
    
    printf("Enter an infix expression: ");
    fgets(infix, MAX_SIZE, stdin);
    
    
    if (infix[strlen(infix)-1] == '\n') {
        infix[strlen(infix)-1] = '\0';
    }
    
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    
    return 0;
}
