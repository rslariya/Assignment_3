#include <stdio.h>
#include <string.h>

#define MAX_SIZE 100


char stack[MAX_SIZE];
int top = -1;


int isEmpty() {
    return top == -1;
}


void push(char c) {
    if (top < MAX_SIZE - 1) {
        top++;
        stack[top] = c;
    }
}


char pop() {
    if (!isEmpty()) {
        char c = stack[top];
        top--;
        return c;
    }
    return '\0';
}


int isMatchingPair(char opening, char closing) {
    if (opening == '(' && closing == ')') return 1;
    if (opening == '[' && closing == ']') return 1;
    if (opening == '{' && closing == '}') return 1;
    return 0;
}


int areParenthesesBalanced(char expr[]) {
    for (int i = 0; i < strlen(expr); i++) {
        
        if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{') {
            push(expr[i]);
        }
        
        else if (expr[i] == ')' || expr[i] == ']' || expr[i] == '}') {
           
            if (isEmpty()) {
                return 0;
            }
           
            else if (!isMatchingPair(pop(), expr[i])) {
                return 0;
            }
        }
    }
    
    
    return isEmpty();
}

int main() {
    char expression[MAX_SIZE];
    
    printf("Enter an expression to check for balanced parentheses: ");
    fgets(expression, MAX_SIZE, stdin);
    
    
    if (expression[strlen(expression)-1] == '\n') {
        expression[strlen(expression)-1] = '\0';
    }
    
    if (areParenthesesBalanced(expression)) {
        printf("The expression has BALANCED parentheses.\n");
    } else {
        printf("The expression has UNBALANCED parentheses.\n");
    }
    
    return 0;
}
